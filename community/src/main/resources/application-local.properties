#现在用.yml(.yaml)格式的配置文件比较多，共存时重叠属性的优先权: properties > yml > yaml#    _    ____  ____#   / \  |  _ \|  _ \#  / _ \ | |_) | |_) |# / ___ \|  __/|  __/#/_/   \_\_|   |_|# ServerProperties.java# 修改banner 默认是on 还可以改很多相关的 benner.txt里可自定义#spring.main.banner-mode=off# 设置端口号  HTTP默认是访问80server.port=8080# 项目名，添加路径  http://localhost:8080/community/...server.servlet.context-path=/community# 配置域名community.path.domain=http://localhost:${server.port}# 配置头像上传路径 需要手动创建community.path.upload=/Users/hcj/Desktop/GraduationProject/developer-community/community/src/main/resources/static/user-avatar# Editor.Md 图片上传路径community.path.editormdUploadPath=/Users/hcj/Desktop/GraduationProject/developer-community/community/src/main/resources/static/editor-md-upload# WebMvcConfig 也要同步修改# _   _                          _             __#| |_| |__  _   _ _ __ ___   ___| | ___  __ _ / _|#| __| '_ \| | | | '_ ` _ \ / _ \ |/ _ \/ _` | |_#| |_| | | | |_| | | | | | |  __/ |  __/ (_| |  _|# \__|_| |_|\__, |_| |_| |_|\___|_|\___|\__,_|_|#           |___/# ThymeleafProperties.java# 开发时候关闭 thymeleaf 缓存 上线的时候要打开spring.thymeleaf.cache=false# __  __       ____   ___  _#|  \/  |_   _/ ___| / _ \| |#| |\/| | | | \___ \| | | | |#| |  | | |_| |___) | |_| | |___#|_|  |_|\__, |____/ \__\_\_____|#        |___/# DataSourceProperties# MySQL 和 连接池(数据源)# 驱动 ( com.mysql.jdbc.Driver 过时了)spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver# 路径 ( MySQL8.x 的驱动要求设置serverTimezone)spring.datasource.url=jdbc:mysql://localhost:3306/community?characterEncoding=utf-8&useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=Hongkong# 账号密码spring.datasource.username=rootspring.datasource.password=123456# 连接池选择spring.datasource.type=com.zaxxer.hikari.HikariDataSource# 连接池最大连接数spring.datasource.hikari.maximum-pool-size=15# 最小可保持的连接数spring.datasource.hikari.minimum-idle=5# 断开连接延迟spring.datasource.hikari.idle-timeout=30000# __  __       _           _   _#|  \/  |_   _| |__   __ _| |_(_)___#| |\/| | | | | '_ \ / _` | __| / __|#| |  | | |_| | |_) | (_| | |_| \__ \#|_|  |_|\__, |_.__/ \__,_|\__|_|___/#        |___/# MybatisProperties# 指明路径target/classes/mapper/*.xmlmybatis.mapper-locations=classpath:mapper/*.xml# 指明实体类的包名mybatis.type-aliases-package=com.coder.community.entity# 启用自增主键mybatis.configuration.useGeneratedKeys=true# 让 header_url下划线命名 和 headerUrl驼峰命名 匹配起来mybatis.configuration.mapUnderscoreToCamelCase=true# Mybatis-plus Properties# 指明路径target/classes/mapper/*.xmlmybatis-plus.mapper-locations=classpath:mapper/*.xml# 指明实体类的包名mybatis-plus.type-aliases-package=com.coder.community.entity# 启用自增主键mybatis-plus.configuration.useGeneratedKeys=true# 让 header_url下划线命名 和 headerUrl驼峰命名 匹配起来mybatis-plus.configuration.mapUnderscoreToCamelCase=truemybatis-plus.global-config.db-config.id-type=automybatis-plus.configuration.log-impl=org.apache.ibatis.logging.stdout.StdOutImpl# _                _                _#| |    ___   __ _| |__   __ _  ___| | __#| |   / _ \ / _` | '_ \ / _` |/ __| |/ /#| |__| (_) | (_| | |_) | (_| | (__|   <#|_____\___/ \__, |_.__/ \__,_|\___|_|\_\#            |___/# logger 把这个包的日志级别调整为debug 这样子可以在控制台看到根本的信息，方便mapper.xml的调试# com.coder.community 这个包下大于debug级别的信息都记录输出# trace debug info warn errorlogging.level.com.coder.community=debug# 将日志信息保存到文件 项目路径/log/community.log 中#logging.file.name=log/community.log# 开发中使用 src/main/resources/logback-spring.xml# __  __       _ _#|  \/  | __ _(_) |#| |\/| |/ _` | | |#| |  | | (_| | | |#|_|  |_|\__,_|_|_|# 使用新浪邮箱作为服务spring.mail.host=smtp.sina.comspring.mail.port=465spring.mail.username=hsediment@sina.com# 授权码spring.mail.password=5ace1bfd7b1c8a82# 使用smtps协议spring.mail.protocol=smtps# 发送邮件的时候采用ssl安全连接spring.mail.properties.mail.smtp.ssl.enable=true# ____          _ _#|  _ \ ___  __| (_)___#| |_) / _ \/ _` | / __|#|  _ <  __/ (_| | \__ \#|_| \_\___|\__,_|_|___/# 使用redis中的11这个库 (一共有16个库，随便选一个)spring.redis.database=11# redis的ip为本机spring.redis.host=localhost# 端口spring.redis.port=6379# _  __      __ _#| |/ /__ _ / _| | ____ _#| ' // _` | |_| |/ / _` |#| . \ (_| |  _|   < (_| |#|_|\_\__,_|_| |_|\_\__,_|# 配置服务spring.kafka.bootstrap-servers=localhost:9092# kafka_2.13-3.1.0/config/consumer.properties 这里面有，可以自己修改spring.kafka.consumer.group-id=community-consumer-group# 是否自动提交消费者的偏移量spring.kafka.consumer.enable-auto-commit=true# 自动提交频率  3000msspring.kafka.consumer.auto-commit-interval=3000# _____ _           _   _                              _#| ____| | __ _ ___| |_(_) ___ ___  ___  __ _ _ __ ___| |__#|  _| | |/ _` / __| __| |/ __/ __|/ _ \/ _` | '__/ __| '_ \#| |___| | (_| \__ \ |_| | (__\__ \  __/ (_| | | | (__| | | |#|_____|_|\__,_|___/\__|_|\___|___/\___|\__,_|_|  \___|_| |_|#6.x是这样子配的  7.x就不一样了# 集群名字(与elasticsearch-6.4.3/config/elasticsearch.yml一致）spring.data.elasticsearch.cluster-name=coder# 9200是http访问的端口，9300是tcp访问，默认会开启这两个端口spring.data.elasticsearch.cluster-nodes=127.0.0.1:9300# _____         _    _____                     _   _#|_   _|_ _ ___| | _| ____|_  _____  ___ _   _| |_(_) ___  _ __#  | |/ _` / __| |/ /  _| \ \/ / _ \/ __| | | | __| |/ _ \| '_ \#  | | (_| \__ \   <| |___ >  <  __/ (__| |_| | |_| | (_) | | | |#  |_|\__,_|___/_|\_\_____/_/\_\___|\___|\__,_|\__|_|\___/|_| |_|# 普通线程5个#spring.task.execution.pool.core-size=5# 不够的话最大阔到15个#spring.task.execution.pool.max-size=15# 15个不用的话把任务放队列里,最多缓冲100个任务#spring.task.execution.pool.queue-capacity=100# _____         _     ____       _              _       _ _#|_   _|_ _ ___| | __/ ___|  ___| |__   ___  __| |_   _| (_)_ __   __ _#  | |/ _` / __| |/ /\___ \ / __| '_ \ / _ \/ _` | | | | | | '_ \ / _` |#  | | (_| \__ \   <  ___) | (__| | | |  __/ (_| | |_| | | | | | | (_| |#  |_|\__,_|___/_|\_\|____/ \___|_| |_|\___|\__,_|\__,_|_|_|_| |_|\__, |#                                                                 |___/# 定时任务的线程数量为5#spring.task.scheduling.pool.size=5#  ___                   _# / _ \ _   _  __ _ _ __| |_ ____#| | | | | | |/ _` | '__| __|_  /#| |_| | |_| | (_| | |  | |_ / /# \__\_\\__,_|\__,_|_|   \__/___|# 把任务持久化到数据库# 存储方式 jdbcspring.quartz.job-store-type=jdbc# 调度任务名称spring.quartz.scheduler-name=communityScheduler# 调度器id自动生成spring.quartz.properties.org.quartz.scheduler.instanceId=AUTO# 任务存到数据库的时候用哪个类spring.quartz.properties.org.quartz.jobStore.class=org.quartz.impl.jdbcjobstore.JobStoreTX# 驱动spring.quartz.properties.org.quartz.jobStore.driverDelegateClass=org.quartz.impl.jdbcjobstore.StdJDBCDelegate# 是否集群spring.quartz.properties.org.quartz.jobStore.isClustered=true# 用哪个线程池sprink.quartz.properties.org.quartz.threadPool.class=org.quartz.simpl.SimpleThreadPool# 线程池5个线程spring.quartz.properties.org.quartz.threadPool.threadCount=5#  ___  _       _# / _ \(_)_ __ (_)_   _#| | | | | '_ \| | | | |#| |_| | | | | | | |_| |# \__\_\_|_| |_|_|\__,_|# AK  个人中心 -> 密钥管理qiniu.key.access=SOQPfcJfjKuSYTp2zhLvVpANZ7vtRyNLFZmYW0Ht# SKqiniu.key.secret=CnhUPaHeZZasfBgWynI9UghpMVOq3nzSPykAdghI# 空间名字qiniu.bucket.header.name=community-user-avatar# 域名  CDN 测试域名   有效期是30天quniu.bucket.header.url=http://r7lewiji7.hn-bkt.clouddn.com#  ____       __  __      _# / ___|__ _ / _|/ _| ___(_)_ __   ___#| |   / _` | |_| |_ / _ \ | '_ \ / _ \#| |__| (_| |  _|  _|  __/ | | | |  __/# \____\__,_|_| |_|  \___|_|_| |_|\___|# 缓存空间有15个数据（页） 用于缓存热门的页面caffeine.posts.max-size=15# 定时过期的时间是3mincaffeine.posts.expire-seconds=180#    _        _               _#   / \   ___| |_ _   _  __ _| |_ ___  _ __#  / _ \ / __| __| | | |/ _` | __/ _ \| '__|# / ___ \ (__| |_| |_| | (_| | || (_) | |#/_/   \_\___|\__|\__,_|\__,_|\__\___/|_|# 控制要暴露的端点(自带的和自定义的端点，记得做权限管理)#management.endpoints.web.exposure.include=*#management.endpoints.web.exposure.exclude=info, caches